#!/bin/bash
# PAWS Devices Management script
# Original source from BISMARK - modified for PAWS
# author: arjuna.sathiaseelan@cl.cam.ac.uk

# Load configuration file
. ~/etc/bdm.conf
. ~/etc/bdm_db.conf

default_BDM_PG_HOST='localhost'
default_BDM_PG_PORT='5432'
default_BDM_PG_MGMT_DBNAME='paws_mgmt'

BDM_PG_HOST=${BDM_PG_HOST:-$default_BDM_PG_HOST}
BDM_PG_PORT=${BDM_PG_PORT:-$default_BDM_PG_PORT}
BDM_PG_MGMT_DBNAME=${BDM_PG_MGMT_DBNAME:-$default_BDM_PG_MGMT_DBNAME}

SSH_USER="root"

# Aliases
query()
{
    psql -A -q -t -U $BDM_PG_USER -h $BDM_PG_HOST -p $BDM_PG_PORT -d $BDM_PG_MGMT_DBNAME -c "$1" \
    | awk 'NF!=0 {print}';
}

# Help screen
# $1 = command
function help() 
{
	grep -A1 "^ *$1" <<-end
	Syntax:

	    $(basename $0) [options] <command>
	
	Commands:
	
	    config   <dev_id> [wifi-enable/wifi-disable/throttle/remove-throttle]  Show or Change <dev_id> configuration options (ALL applies)

	    console  <dev_id>                    Open a console on <dev_id> over the SSH tunnel
	
	    copy     <dev_id> <file>             Copy file to <dev_id> /tmp directory

	    gtunnel  <dev_id> [port]             Open a globally accessible tunnel to <dev_id> (default: random)

	    exec     <dev_id> <command>          Execute a shell command on <dev_id>
	
	    list                                 List available devices and tunnels

	    readmsg                              Read incoming messages

	    tunnel   <dev_id> <on> [ip:port]     Open a tunnel to <dev_id> using SSH port forwarding (default: 127.0.0.1:22)
	             <dev_id> <off> [port]       Close a tunnel to <dev_id> (default: oldest) (ALL applies)
	
	    upgrade  <dev_id> [URL]              Upgrade software on <dev_id> (ALL applies)


	    For internal use only:

	    blacklist [<dev_id> <on|off>]   Manage devices blacklist

	    updatetunnels                   Updates the tunnel list catching eventual recovery shells

	    settunnel <dev_id> <port>       Set the tunnel entry for <dev_id>

	    setuser   <dev_id> <username>   Set the SSH username for <dev_id>
	
	    clearmsg  [id]                  Delete pending messages

	    cleardev  [id]                  Delete device from list

	    expand    <dev_id>              Expand the shortened device ID into its full device ID.

	Options:
	
	    -o <ssh_opts>    Additional SSH options
	    -p <fwd_port>    SSH tunnel port number (default: random)"
	    -t <timeout>     Max seconds to wait for messages (default: $MSG_TIMEOUT)
	end
	exit
}

# Parse command line
function parse()
{
	p=$*

	# Parse options
	while getopts 'o:p:t:' flag; do
		case $flag in
		o)
			SSH_OPTIONS+=" -$OPTARG"
		;;
		p)
			FWD_PORT=$OPTARG
		;;
		t)
			MSG_TIMEOUT=$OPTARG
		;;
		*)
			echo "Unknown option: $flag $OPTARG"
			help
		;;
		esac
	done
	shift $(( OPTIND - 1 ))	
	
	# Parse commands
	case $1 in
	tunnel)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help tunnel; }
		[ $3 ] || { echo -e "Missing parameter: on|off\n"; help tunnel; }
		if [ $2 == ALL ]; then
			if [ $3 == "on" ]; then
				NOWAIT=on
				for dev in $(query "SELECT id FROM devices WHERE $(date +%s) - EXTRACT(epoch from date_trunc('second', date_last_seen)) < 180;"); do
					FWD_PORT=""
					start_tunnel $dev
				done
			elif [ $3 == "off" ]; then
				for dev in $(query "SELECT device_id FROM tunnels;"); do
					stop_tunnel $dev
				done
			fi
		else
			device_id=$2
			check_device_id 'device_id' || help tunnel;
			[ $3 == "on" ] && start_tunnel $device_id $4
			[ $3 == "off" ] && stop_tunnel $device_id $4
		fi
	;;
	gtunnel)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help gtunnel; }
		[ $2 == ALL ] && { echo -e "ALL not allowed\n"; help gtunnel; }
		device_id=$2
		check_device_id 'device_id' || help gtunnel;
		start_gtunnel $device_id $3
	;;
	console)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help console; }
		[ $2 == ALL ] && { echo -e "ALL not allowed\n"; help console; }
		device_id=$2
		check_device_id 'device_id' || help console;
		echo "Connecting to $device_id"
		console $device_id
	;;
	exec)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help exec; }
		[ $3 ] || { echo -e "Missing parameter: <command>\n"; help exec; }
		[ $2 == ALL ] && { echo -e "ALL not allowed\n"; help exec; }
		device_id=$2
		check_device_id 'device_id' || help exec;
		echo "Executing \"${p#* * }\" on $device_id"
		console $device_id ${p#* * }
	;;
	list)	
		list $2
	;;
	mslist)	
		mslist
	;;
	readmsg)
		read_msg
	;;
	blacklist)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help blacklist; }
		[ $3 ] || { echo -e "Missing parameter: on|off\n"; help blacklist; }
		device_id=$2
		check_device_id 'device_id' || help blacklist;
		blacklist $device_id $3
	;;
	upgrade)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help upgrade; }
		device_id=$2
		check_device_id 'device_id' || help upgrade;
		upgrade $device_id $3
	;;
	config)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help config; }
		[ $2 == ALL ] && echo $* | grep -q DEVICE_ID && { echo -e "ALL not allowed for DEVICE_ID\n"; help config; }
		device_id=$2
		check_device_id 'device_id' || help config;
		config $device_id $3
	;;
	setuser)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help setuser; }
		[ $3 ] || { echo -e "Missing parameter: <username>\n"; help setuser; }
		device_id=$2
		check_device_id 'device_id' || help setuser;
		setuser $device_id $3
	;;
	settunnel)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help settunnel; }
		[ $3 ] || { echo -e "Missing parameter: <port>\n"; help settunnel; }
		device_id=$2
		check_device_id 'device_id' || help blacklist;
		settunnel $device_id $3
	;;
	updatetunnels)
		updatetunnels
	;;
	copy)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help copy; }
		[ $3 ] || { echo -e "Missing parameter: <file>\n"; help copy; }
		device_id=$2
		check_device_id 'device_id' || help copy;
		copy $device_id $3
	;;
	clearmsg)
		clearmsg $2 
	;;
	cleardev)
		cleardev $2 
	;;
	expand)
		[ $2 ] || { echo -e "Missing parameter: <dev_id>\n"; help expand_id; }
		device_id=$2
		{ check_device_id 'device_id' && echo "$device_id"; } || exit 1
	;;
	*)
		[ $1 ] && echo "Unknown command: $1"
		help
	;;
	esac
}

## Utility functions ##

# Send message 
# $1 = dev id
# $2 = command
# $3 = value
function send_msg()
{
	# Add message to queue
	if [ $1 == ALL ]; then
		# Broadcast
		for dev in $(query "SELECT id FROM devices;"); do
			query "INSERT INTO messages(msgfrom, msgto, msg) VALUES('BDM','$dev','$2 $3');"
		done
	else
		# Unicast
		query $MSG_DB "INSERT INTO messages(msgfrom, msgto, msg) VALUES('BDM','$1','$2 $3');"

		[ $NOWAIT ] && return 0

		# Wait for message delivery
		time=0
		while [ true ]; do
			rowid=$(query "SELECT * FROM messages WHERE msgto ='$1' AND msg='$2 $3';")
			[ ${#rowid} -eq 0 ] && return 0
			[ $((time++)) -eq $MSG_TIMEOUT ] && return 1
			echo -n "."
			sleep 1
		done
	fi
}

# Receive message 
# $1 = dev id
function recv_msg()
{
	# Wait for message 
	time=0
	while [ true ]; do
		info=$(query "SELECT msg FROM messages WHERE msgfrom='$1';")
		if [ ${#info} -gt 0 ]; then
			echo
			read_msg $1
			return 0
		fi
		[ $((time++)) -eq $MSG_TIMEOUT ] && return 1
		echo -n "."
		sleep 1
	done
}

# Check device ID
# $1 = name of variable containing device id (to be deferenced by this func)
function check_device_id()
{
	eval "cdi_devid=\"\${$1}\""
	num_devices=$(query "SELECT count(id) FROM devices WHERE id LIKE '%$cdi_devid';")
	if [ $num_devices -eq 1 ]; then
		cdi_devid=$(query "SELECT id FROM devices WHERE id LIKE '%$cdi_devid' LIMIT 1;")
		eval "$1=\${cdi_devid}"
		return 0
	elif [ $num_devices -lt 1 ]; then
		echo "Unknown device '$cdi_devid'."
		return 1
	else
		echo "'$cdi_devid' is ambiguous. Be more specific."
		return 2
	fi
}


# Check forwarding port
# $1 = port number
function check_fwd_port()
{
	if [ $(netstat -lnt | grep -c "::1\?:$FWD_PORT\>") -gt 0 ]; then
		return 0
	else
		return 1
	fi
}

# Generate a valid SSH forwarding port
function gen_fwd_port()
{
	# Test requested port number availability
	if [ $FWD_PORT ]; then
		if (check_fwd_port $FWD_PORT); then
			echo "warning: $FWD_PORT not available"
		else
			return 0
		fi
	fi

	# Find a random available port number
	FWD_PORT=$(( RANDOM + 10000 ))
	while (check_fwd_port $FWD_PORT); do
		FWD_PORT=$(( RANDOM + 10000 ))
	done
}

# Get dev currently used forwarding port
# $1 = dev id
function get_fwd_port()
{
	# Query tunnels db
	FWD_PORT=$(query "SELECT port FROM tunnels WHERE device_id='$1' ORDER BY date_created ASC LIMIT 1;")
	[ $FWD_PORT ] || return 1
}

# Check tunnel availability
# $1 = dev id
# $2 = port number
# rv = 0 if tunnel is active
# rv = 1 if tunnel is not in DB
# rv = 2 if tunnel is opening
# rv = 3 if tunnel is expired
function check_tunnel()
{
	if [ $2 ]; then
		FWD_PORT=$2
	else
		get_fwd_port $1 || return 1
	fi
	
	if check_fwd_port $FWD_PORT; then
		return 0
	else
		query "DELETE FROM tunnels WHERE device_id='$1' AND port=$FWD_PORT AND EXTRACT(epoch from date_trunc('second', date_created))<$(date +%s);"
		get_fwd_port $1 && return 2 || return 3
	fi
}

# Wait for tunnel availability
# $1 = port number
function wait_tunnel()
{
	echo -en "\nWaiting for tunnel establishment"
	time=0
	while [ true ]; do 
		port=$(netstat -lnt | grep -c "127.0.0.1:$1")

		if [ $port -ge 1 ]; then
			echo -e "\nTunnel ready on 127.0.0.1:$1"
			return 0
		elif [ $((time++)) -eq $SSH_PORT_FWD_WAIT ]; then 
			echo "Error: tunnel not found"
			return 1
		fi

		echo -n "." 
		sleep 1
	done
}

# Send notification by email
# $1 = dev id
# $2 = message
function sendmail ()
{
	# Expand @filename if present
	if [ ${1:0:1} == "@" ]; then
		msg=$(cat ${1:1})
		id=$(basename $1)
	else
		msg=$2
		id=$1
	fi

	# Send email to admins
	/usr/sbin/sendmail -t <<-end
		From: "PAWS Device Manager" <do-not-reply@paws.net>
		To: "Arjuna Sathiaseelan" <arjuna.sathiaseelan@cl.cam.ac.uk>
		Subject: PAWS Notification System ($id)
		Date: $(date -R)
		Content-type: text/plain

		$msg

		-- BDM
	end
}

# Set device tunnel entry
# $1 = dev id
# $2 = port
function settunnel()
{
	echo -n "Setting tunnel db entry for $1 on port $2..."
	query "INSERT INTO tunnels (device_id, port, date_created) VALUES('$1',$2,TIMESTAMP 'epoch' + $(date +%s) * INTERVAL '1 second');"
	echo done
	
	# Send notification email
	sendmail $1 "Recovery tunnel created for $1 on port $2"
}

# Update the tunnel list from ps and netstat outputs
function updatetunnels()
{
	echo -n "Updating tunnels..."
	echo done
}

## User command functions ##

# Start new tunnel
# $1 = dev id
# $2 = ip:port
function start_tunnel()
{
	if [ ! $2 ] && check_tunnel $1; then 
		echo "Tunnel to $1 listening on 127.0.0.1:$FWD_PORT" 
		return 1
	fi
	gen_fwd_port

	if [ $2 ]; then
		echo "Starting SSH tunnel to dev $1 on port $FWD_PORT (to $2)"
		send_msg $1 fwd $FWD_PORT:$2 || { echo -e "\nDelivery to $1 failed"; return 2; }
	else
		echo "Starting SSH tunnel to dev $1 on port $FWD_PORT"
		send_msg $1 fwd $FWD_PORT || { echo -e "\nDelivery to $1 failed"; return 2; }
	fi

	if [ $NOWAIT ] || wait_tunnel $FWD_PORT ; then
		query "INSERT INTO tunnels (device_id, port, date_created) VALUES ('$1', $FWD_PORT, TIMESTAMP 'epoch' + $(date +%s) * INTERVAL '1 second');"
	else
		return 3
	fi
}

# Connect to the SSH server on the dev
# $1 = dev id
# $* = optional shell command
function console()
{
	if [ ! $FWD_PORT ]; then 
		start_tunnel $1
		case $? in
		0) new=1 ;;
		2) return 1;;
		esac
	fi

	[ $2 ] && { p=$* ; cmd=${p#* } ; }
	if [ "$cmd" == bg ]; then
		ssh $SSH_USER@127.0.0.1 -p $FWD_PORT $SSH_OPTIONS 2>/dev/null &
	else
		ssh $SSH_USER@127.0.0.1 -p $FWD_PORT $SSH_OPTIONS $cmd 2>/dev/null
		[ $new ] && stop_tunnel $1
	fi
}

# Stop active tunnel
# $1 = dev id
# $2 = port number
function stop_tunnel()
{
	if ! check_tunnel $1 $2; then
		echo "Tunnel expired"
		return 1 
	fi

	echo "Stopping SSH tunnel to device $1 on port $FWD_PORT"
	pid=$(sudo netstat -lntp | grep "::1\?:$FWD_PORT\>" | awk '{ print $7 }')
	kill ${pid%/*}

	if (check_fwd_port $FWD_PORT); then
		echo "Unable to close tunnel"
	else
		echo "Tunnel closed"
		query "DELETE FROM tunnels WHERE device_id='$1' AND port=$FWD_PORT;"
	fi
}

# Start global tunnels
# $1 = dev id
# $2 = port
function start_gtunnel()
{
	if [ $2 ]; then 
		if check_tunnel $1 $2; then 
			echo "Tunnel listening on port $FWD_PORT" 
			return 1
		fi
		tport=$2
	else
		gen_fwd_port
		tport=$FWD_PORT
		FWD_PORT=""
	fi

	SSH_OPTIONS="-N -L $tport:127.0.0.1:22 -g $SSH_OPTIONS"
	console $1 bg
	sleep 1

	if (check_fwd_port $tport); then
		settunnel $1 $tport
		echo "Tunnel listening on 0.0.0.0:$tport"
	else
		echo "Unable to open tunnel"
	fi
}

# Update device software
# $1 = dev id
# $2 = URL
function upgrade()
{
	echo "Upgrading $1"

	# Start upgrade script
	echo "Executing upgrade:"
	if check_tunnel $1; then
		console $1 "~/scripts/action" update "$2"
	else
		# Send message
		send_msg $1 update "$2" || { [ $1 == ALL ] && echo done || { echo -e "\nDelivery to $1 pending"; return 1; } ; }

		# Wait reply
		echo -e "\nWaiting for upgrade log:"
		if [ $1 == ALL ]; then
			for ((i=$MSG_TIMEOUT;i>0;i--)); do
				echo -ne "Remaining $i seconds  \r"
				sleep 1
			done
			echo
			read_msg
		else
			recv_msg $1 || { echo -e "\nNo messages from $id"; return 2; } 
		fi
	fi
}

# Show/push configuration options
# $1 = dev id
# $* = options
function config()
{
	id=$1
	shift
	
	params=$(echo $* | tr ' ' '&')
	echo -n "Sending config request to $id"
	send_msg $id config $params || { echo -e "\nDevice $id not found"; return 1; }
	
	# Wait reply
	echo -e "\nWaiting for config log:"
	if [ $id == ALL ]; then
		for ((i=$MSG_TIMEOUT;i>0;i--)); do
			echo -ne "Remaining $i seconds  \r"
			sleep 1
		done
		echo
		read_msg
	else
		recv_msg $id || { echo -e "\nNo messages from $id"; return 2; }
	fi
}

# List active devices and tunnels
# $1 = update flag
function list()
{
	# Dump devices table
	echo -e "${BLUE}\nDevices:${NO_COLOR}"
	echo -ne "${WHITE}"
	printf "%-16s %-15s %-7s %-20s %-10s" ID IP VERSION LAST_PROBE USER
	echo -e "${NO_COLOR}"
	IFS=$'\n' 
	for dev in $(query "SELECT id,ip,bversion,EXTRACT(epoch from date_trunc('second', date_last_seen)) FROM devices ORDER BY id;"); do
		IFS=$'|' read id ip ver ts <<< "$dev"
		off_time=$(( $(date +%s) - $ts ))
		if [ $off_time -lt 300 ]; then
			echo -ne $GREEN
		elif [ $off_time -lt 600 ]; then
			echo -ne $YELLOW
		else
			[ "$1" == log -a $off_time -lt 900 ] && echo "$(date +"%Y-%m-%d %H:%M:%S") - Device $id went offline" >> /tmp/devices.log
			echo -ne $RED
		fi
		printf "%-16s %-15s %-7s %-20s %-10s" $id $ip $ver $(date -d @$ts +"%Y-%m-%d %H:%M:%S")
		echo -e $NO_COLOR
	done
	[ "$1" == "notify" ] && ( sendmail "@/tmp/devices.log" ; rm /tmp/devices.log )

	# Dump tunnels table
	echo -e "\n${BLUE}Tunnels:${NO_COLOR}"
	echo -ne "${WHITE}"
	printf "%-16s %-5s %-20s" ID PORT START_TIME
	echo -e "${NO_COLOR}"

	IFS=$'\n' 
	for dev in $(query "SELECT device_id, port, EXTRACT(epoch from date_trunc('second', date_created)) FROM tunnels ORDER BY device_id;"); do
		IFS=$'|' read id port ts <<< "$dev"
		check_tunnel $id $port
		if [ $? -eq 0 ]; then
			echo -ne $GREEN
		elif [ $? -eq 2 ]; then
			echo -ne $YELLOW
		else
			echo -ne $RED
		fi
		printf "%-16s %-5s %-20s" $id $port $(date -d @$ts +"%Y-%m-%d %H:%M:%S")
		echo -e $NO_COLOR
	done
	echo -ne $NO_COLOR

	# Dump messages table
	echo -e "\n${BLUE}Pending Messages:${NO_COLOR}"
	echo -e "${WHITE}ID\tFROM\tTO\tMESSAGE${NO_COLOR}"
	IFS=$'\n' 
	for message in $(query 'SELECT * FROM messages ORDER BY msgfrom,msgto;'); do
		IFS=$'|' read from to msg <<< "$message"
		echo -ne $MAGENTA
		printf "%s\t%s\t%s" $from $to $msg
		echo -e $NO_COLOR
	done
}


# Copy file to device /tmp directory
# $1 = dev_id
# $2 = file
function copy()
{
	if [ ! $FWD_PORT ]; then 
		start_tunnel $1
		case $? in
		0) new=1 ;;
		2) return 1;;
		esac
	fi

	scp -P $FWD_PORT $SSH_OPTIONS -i $SSH_KEY $2 $SSH_USER@127.0.0.1:/tmp 2>/dev/null
}

# Read messages
# $1 = id
function read_msg()
{
	if [ $1 ]; then
		rows=$(query "SELECT * FROM messages WHERE msgfrom='$1';")
	else
		rows=$(query "SELECT * FROM messages WHERE msgto='BDM';")
	fi

	if [ ${#rows} -gt 0 ]; then
		IFS=$'\n'
		for row in $rows; do
			IFS=$'|' read rowid from to msg <<< "$row"
			echo "Message from $from: $msg"
			echo "------------------------"
			awk '
				BEGIN{ out = 0 }
				/^END - '$msg'/{ exit }
				(out == 1){ print }
				/'$msg'/{ out=1 }
			' ~/var/log/devices/$from.log
			echo "------------------------"

			query "DELETE FROM messages WHERE msgfrom='$1';"
		done
	else
		echo "No incoming messages"
	fi
}

# Add remove device from blacklist
# $1 = dev id
# $2 = on|off
function blacklist ()
{
	if [ $1 ]; then
		case $2 in
		on) 
			query "INSERT INTO blacklist (device_id) VALUES('$1');"
			echo -e "Added $1 to blacklist\n"
		;;
		off) 
			query "DELETE FROM blacklist WHERE device_id='$1';" 
			echo -e "Removed $1 from blacklist\n"
		;;
		esac	
	fi

	echo -e "${WHITE}Blacklisted devices:${RED}"
	query "SELECT device_id FROM blacklist;"
	echo -ne $NO_COLOR
}

## Internal commands ##

# Set device SSH username
# $1 = dev id
# $2 = username
function setuser()
{
	echo -n "Setting $1 SSH user to $2..."
	if [ $(query "SELECT id FROM devices WHERE id='$1';") ]; then
		query "UPDATE devices SET duser='$2' WHERE id='$1';"
	else
		query "INSERT INTO devices (id, duser) VALUES('$1','$2');"
	fi
	echo done
}

# Clear pending messages
# $1 = id
function clearmsg()
{
	if [ $1 ]; then
		query "DELETE FROM messages WHERE id=$1;"
	else
		echo "Delete all pending messages (y/N)?"
		read a
		[ $a == "y" ] && query "DELETE FROM messages;"
	fi
}

# Clear pending messages
# $1 = id
function cleardev()
{
	if [ $1 ]; then
		query "DELETE FROM devices WHERE id=\"$1\";"
	else
		echo "Delete all devices (yes/no)?"
		read a
		[ $a == "yes" ] && query "DELETE FROM devices;"
	fi
}

## Main ##

# Set random seed
RANDOM=$(( `date +%s` % 32767 ))
# Parse command-line
parse $*

